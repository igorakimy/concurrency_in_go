package main

import "fmt"

func primeMultipleFilter(numbers <-chan int, quit chan<- int) {
	var right chan int

	// Получает первое сообщение, содержащее простое число p,
	// из входного канала и выводит на экран.
	p := <-numbers
	fmt.Println(p)

	// Продолжает читать числа из входного канала.
	for n := range numbers {
		// Игнорирует любое полученное число, которое кратное p.
		if n%p != 0 {
			// Если текущая горутина не имеет ничего справа,
			// она запускает новую горутину и соединяется с ней каналом.
			if right == nil {
				right = make(chan int)
				go primeMultipleFilter(right, quit)
			}
			// Отправляет отфильтрованное число в правый канал.
			right <- n
		}
	}

	if right == nil {
		// Закрывает канал quit, если номеров для фильтрации
		// больше не осталось, а у горутины нет правого(right) канала.
		close(quit)
	} else {
		// В противном случает, закрывает правый(right) канал.
		close(right)
	}
}

func main() {
	// Создать входной канал, который будет подаваться
	// горутине для фильтации простых чисел.
	numbers := make(chan int)
	// Создать общий закрывающий канал.
	quit := make(chan int)

	// Запустить первую горутину в конвейере,
	// передавая каналы numbers и quit.
	go primeMultipleFilter(numbers, quit)

	// Передавать последовательно числа,
	// начинающчиеся от 2 до 100000 во входной канал.
	for i := 2; i < 100_000; i++ {
		numbers <- i
	}
	// Закрыть входной канал, сообщая, что чисел больше не будет.
	close(numbers)
	// Подождать, пока канал quit не будет закрыт.
	<-quit
}
